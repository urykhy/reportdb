#summary MDC/TL interface tutorial


This tutorial here to teach about MDC/TL interface.

== Data Types ==

{{{
  typedef TL::MakeTypelist<UINT_32, UINT_32, UINT_32>::Result mdc_Key;
  typedef UINT_32 mdc_Val;
  typedef Client<mdc_Key, mdc_Val> Data;
}}}
 
  * mdc_Key - is a Type used to hold a dimensional data, we have 3 dimensions here.
  * mdc_Val - value type. This is a type of values our DB will store.
  * Data - is a calls to TMP (Template MetaProgramming internals to generate all required classes, we study em later)

{{{
struct Worker {
void operator()(const mdc_Key& key, const mdc_Val& val);
void operator()(const mdc_Key& key, const Util::Index& bs);
};
}}}

Worker is a class to make a report. Here we have a 2 entry points, but why ? We can recall - MDC have compression - so... we need one function to handle normal data, and one to handle decompressed.

`Util::Index` here is a type used in bitset-compression, another one - `std::vector<mdc_Val>` - used in LZO compression.

access to mdc_Key data is easy :
{{{
void operator()(const mdc_Key& key, const mdc_Val& val) {
      auto someval = TL::get<0>(key);
}
}}}

Use `MDC::TL::get` function to get a value from tuple. Template parameter `<0>` is a number of value in mdc_Key tuple.


=== Initial fill ===

{{{
    std::string fn("__mdc_tl_test1");
    Create<Data> mdc(fn);
    Create<Data>::RawDataT id;
    Filter::BitSet filter;
    ... {1} ...
    mdc.insert(id, filter);
    mdc.close();
}}}

  * `fn` is a filename. 
  * `filter` used to compress data we storing (BitSet filtering here)
  * `id` is a container to collect data before it placed to MDC. `Filter::BitSet` is a filter designed to compress a UINT_32 (or lower width) data. To compress a more complicated structs (or just UINT_64) - you can use Filter::LZO or make an own implementation.


Fill with values looks like :
{{{
    Data::Key e;
    TL::SetArg(e, i1, i2, i3);
    id[e].push_back(value);
}}}

after `id` is populated, we pass it to `mdc.insert()`. After all data blocks is written - we should call a `close` to finalize MDC.


=== Run a Report ===

We have write some data to disk, now we going to read it:

{{{
  UseMDC<Data> uc(fn);
  Data::Narrow narrow;
  TL::get<0>(narrow.limit).insert(11);
  Worker worker;
  uc.access(narrow, worker, filter);
}}}

UseMDC is a class to read MDC data, it requires a Narrow(to limit row passed to worker), a Worker(report generator), and a filter (please note, filter should be the same as in write-time() )

`TL::get<0>()` is here to get a container (`std::set`) used to filter some records from handling by worker. `<0>` is a number of filter (in tune with mdc_Val access numbers).

say if our mdc_Key is a 
{{{
  typedef TL::MakeTypelist<UINT_32, UINT_32, UINT_32>::Result mdc_Key;
}}}

`<0>` is a first type defined, `<1>` - second and `<2>` third. This may be good to have some enum or other to make a symbol names.


=== References ===

test/test-tl.cpp

you may refer to `test/test-mdc.cpp` for low-level interface.